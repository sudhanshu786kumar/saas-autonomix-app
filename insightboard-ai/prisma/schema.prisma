generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  actionItems   ActionItem[]
  sessions      Session[]
  transcripts   Transcript[]

  @@map("users")
}

model Transcript {
  id          String       @id @default(cuid())
  content     String
  title       String?
  sentiment   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  actionItems ActionItem[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transcripts")
}

model ActionItem {
  id           String      @id @default(cuid())
  text         String
  status       TaskStatus  @default(PENDING)
  priority     Priority    @default(MEDIUM)
  tags         String[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  completedAt  DateTime?
  userId       String
  transcriptId String?
  transcript   Transcript? @relation(fields: [transcriptId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([userId])
  @@map("action_items")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum TaskStatus {
  PENDING
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
