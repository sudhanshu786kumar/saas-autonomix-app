// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  transcripts Transcript[]
  actionItems ActionItem[]
  accounts    Account[]
  sessions    Session[]

  @@map("users")
}

model Transcript {
  id        String   @id @default(cuid())
  content   String
  title     String?
  sentiment String?  // For Level 3 sentiment analysis
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  actionItems ActionItem[]

  @@map("transcripts")
}

model ActionItem {
  id          String     @id @default(cuid())
  text        String
  status      TaskStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  tags        String[]   // For team tags like @Marketing, @Tech
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?

  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  transcriptId String?
  transcript   Transcript? @relation(fields: [transcriptId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([userId])
  @@map("action_items")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum TaskStatus {
  PENDING
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
